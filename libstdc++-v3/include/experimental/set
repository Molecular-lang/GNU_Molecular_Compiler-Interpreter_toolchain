// Please review: $(src-dir)/SPL-README for Licencing info.

#ifndef _GLIBCXX_EXPERIMENTAL_SET
#define _GLIBCXX_EXPERIMENTAL_SET 1

#pragma GCC system_header

#if __cplusplus >= 201402L

#include <set>
#include <bits/erase_if.h>
#include <experimental/memory_resource>

namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

namespace experimental
{
inline namespace fundamentals_v2
{
  template<typename _Key, typename _Compare, typename _Alloc,
	   typename _Predicate>
    inline void
    erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)
    {
      const _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;
      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);
    }

  template<typename _Key, typename _Compare, typename _Alloc,
	   typename _Predicate>
    inline void
    erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)
    {
      const _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;
      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);
    }

  namespace pmr {
    template<typename _Key, typename _Compare = less<_Key>>
      using set = std::set<_Key, _Compare, polymorphic_allocator<_Key>>;

    template<typename _Key, typename _Compare = less<_Key>>
      using multiset = std::multiset<_Key, _Compare,
				     polymorphic_allocator<_Key>>;
  } // namespace pmr

} // namespace fundamentals_v2
} // namespace experimental

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std

#endif // C++14

#endif // _GLIBCXX_EXPERIMENTAL_SET
