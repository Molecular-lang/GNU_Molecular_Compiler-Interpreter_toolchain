// Please review: $(src-dir)/SPL-README for Licencing info.

#ifndef _GLIBCXX_EXPERIMENTAL_UNORDERED_SET
#define _GLIBCXX_EXPERIMENTAL_UNORDERED_SET 1

#pragma GCC system_header

#if __cplusplus >= 201402L

#include <unordered_set>
#include <bits/erase_if.h>
#include <experimental/memory_resource>

namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

namespace experimental
{
inline namespace fundamentals_v2
{
  template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,
	   typename _Predicate>
    inline void
    erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,
	     _Predicate __pred)
    {
      const _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&
	__ucont = __cont;
      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);
    }

  template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,
	   typename _Predicate>
    inline void
    erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,
	     _Predicate __pred)
    {
      const _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&
	__ucont = __cont;
      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);
    }

  namespace pmr {
    template<typename _Key, typename _Hash = hash<_Key>,
	     typename _Pred = equal_to<_Key>>
      using unordered_set
      = std::unordered_set<_Key, _Hash, _Pred, polymorphic_allocator<_Key>>;

    template<typename _Key, typename _Hash = hash<_Key>,
	     typename _Pred = equal_to<_Key>>
      using unordered_multiset
      = std::unordered_multiset<_Key, _Hash, _Pred,
				polymorphic_allocator<_Key>>;
  } // namespace pmr

} // namespace fundamentals_v2
} // namespace experimental

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std

#endif // C++14

#endif // _GLIBCXX_EXPERIMENTAL_UNORDERED_SET
