// <source_location> -*- C++ -*-

// Please review: $(src-dir)/SPL-README for Licencing info.

/** @file include/source_location
 *  This is a Standard C++ Library header.
 */

#ifndef _GLIBCXX_SRCLOC
#define _GLIBCXX_SRCLOC 1

#if __cplusplus > 201703L && __has_builtin(__builtin_source_location)
#include <bits/c++config.h>

namespace std
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#define __cpp_lib_source_location 201907L

  /// A class that describes a location in source code.
  struct source_location
  {
  private:
    using uint_least32_t = __UINT_LEAST32_TYPE__;
    struct __impl
    {
      const char* _M_file_name;
      const char* _M_function_name;
      unsigned _M_line;
      unsigned _M_column;
    };
    using __builtin_ret_type = decltype(__builtin_source_location());

  public:

    // [support.srcloc.cons], creation
    static consteval source_location
    current(__builtin_ret_type __p = __builtin_source_location()) noexcept
    {
      source_location __ret;
      __ret._M_impl = static_cast <const __impl*>(__p);
      return __ret;
    }

    constexpr source_location() noexcept { }

    // [support.srcloc.obs], observers
    constexpr uint_least32_t
    line() const noexcept
    { return _M_impl ? _M_impl->_M_line : 0u; }

    constexpr uint_least32_t
    column() const noexcept
    { return _M_impl ? _M_impl->_M_column : 0u; }

    constexpr const char*
    file_name() const noexcept
    { return _M_impl ? _M_impl->_M_file_name : ""; }

    constexpr const char*
    function_name() const noexcept
    { return _M_impl ? _M_impl->_M_function_name : ""; }

  private:
    const __impl* _M_impl = nullptr;
  };

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std
#endif // C++20 && __builtin_source_location
#endif // _GLIBCXX_SRCLOC
